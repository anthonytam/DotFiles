* Question 2
** Part a) Given the index i of an element in the array, what are the indices of the left child, the middle child, the right child, and the parent of the element?
   The left element can be found by: $(3\cdot index) + 1$\\
   The middle element can be found by: $(3\cdot index) + 2$\\
   The right element can be found by: $(3\cdot index) + 3$\\
   The parent element can be found by: $floor(\frac{index - 1}{3})$\\

** Part b) How do EXTRACT-MAX and INSERT work for a ternary max-heap?

   Extract Max:\\
   Very similar to a binary heap, the only difference being when checking for the largest child object, we need to check all 3 children instead of 2.\\

   Insert:\\
   There are no differences, simply keep checking the parent element and bubble up.\\

** Part c) Write the pseudo-code of a recursive implementation of IS-TERNARY-MAX-HEAP, explain its correctness, and its asymptotic upper-bound
*** Pseudo-Code
#+BEGIN_SRC python
  def IS-TERNARY-MAX-HEAP(A, i = 0):
     '''
         Where right_child, middle_child, and left_child
         are the formulas from Part a)
     '''
     if left_child > len(A): # No left child, single node
        return True
     elif right_child <= len(A):
        if A[i] > A[right_child] and A[i] > A[middle_child] and A[i] > A[left_child]:
           return IS-TERNARY-MAX-HEAP(A, right_child)
                  and IS-TERNARY-MAX-HEAP(A, middle_child)
                  and IS-TERNARY-MAX-HEAP(A, left_child)
           return False
     elif middle_child <= len(A):
        if A[i] > A[middle_child] and A[i] > A[left_child]:
           return IS-TERNARY-MAX-HEAP(A, middle_child)
                  and IS-TERNARY-MAX-HEAP(A, left_child)
           return False
     elif left_child <= len(A) and A[i] > A[left_child]:
        return IS-TERNARY-MAX-HEAP(A, left_child)
     return False 
#+END_SRC

*** Correctness
    - If there is no child to the node, a single node is always a valid heap, so return true.
    - If we have a right child, check if all 3 children are less then the parent value. If so, return the result of the smaller heaps where the child is the parent. Otherwise return false.
    - If we have no right child, do the same as above for the middle and left child.
    - If we have no middle child, so the same as above for only the left child.

*** Asymptotic Upper-Bound:
    - The function will check every node in the tree to ensure it is in a valid position. \therefore O(n)
** Part d) Write the pseudo-code of a iterative implementation of IS-TERNARY-MAX-HEAP, explain its correctness, and its asymptotic upper-bound
*** Pseudo-Code
#+BEGIN_SRC python
def IS-TERNARY-MAX-HEAP(A):
   '''
       Where right_child, middle_child, and left_child
       are the formulas from Part a)
   '''
   foreach (i in A):
       if right_child <= len(A):
          if not (i > A[right_child] and i > A[middle_child] and i > A[left_child]):
             return False
       elif middle_child <= len(A):
          if not (i > A[middle_child] and i > A[left_child]):
             return False
       elif left_child <= len(A) and i <= A[left_child]:
          return False
#+END_SRC

*** Correctness
    - If we have a right child, check if all 3 children are less then the parent value. If they are not, return false.
    - If we have no right child, do the same as above for the middle and left child.\\
    - If we have no middle child, so the same as above for only the left child. \\

*** Asymptotic Upper-Bound
    - The function uses a foreach to cycle every element in the list. $\therefore O(n)$
