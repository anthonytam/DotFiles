#+TITLE: PlzFaxName
#+AUTHOR: Anthony Tam

* Package Management
** Package.el & Sources
   Initialize =package.el= after adding all the main sources.
  
   #+BEGIN_SRC emacs-lisp :tangle yes
     (require 'package)
     (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
     (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
     (add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))
     (setq package-enable-at-startup nil)
     (package-initialize)
   #+END_SRC
  
** Use Package
   Bootstrap =use-package= so we can use it in the rest of the config.
   
   #+BEGIN_SRC emacs-lisp :tangle yes
     (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package))
     (require 'use-package)
     (setq use-package-always-ensure t)
   #+END_SRC
   
* General Settings
  
  #+BEGIN_SRC emacs-lisp :tangle yes
    (setq inhibit-splash-screen t
          inhibit-startup-message t)
    (setq initial-scratch-message "") ; No scratch text
    (fset 'yes-or-no-p 'y-or-n-p) ; y/n instead of yes/no
    (column-number-mode t) ; show column number in mode line
    (delete-selection-mode 1) ; Replace selection on insert
    (setq vc-follow-symlinks t) ; Always follow symlinks
    (setq custom-file "~/.emacs.d/custom.el") ; Set custom file
    (load custom-file 'noerror) ; Load custom file
    (setq org-pretty-entities t) ; Live LaTeX in org mode
  #+END_SRC
  
* Org Mode
  
  #+BEGIN_SRC emacs-lisp :tangle yes
    (require 'org-agenda)

    (setq org-agenda-prefix-format
          '((agenda . " %i %-12t% s %-9(car (last (org-get-outline-path)))")
            (timeline . "  % s")
            (todo . " %i %-12:c")
            (tags . " %i %-12:c")
            (search . " %i %-12:c")))

    (setq org-agenda-files '("~/Dropbox/org/TODO.org"))
    (global-set-key "\C-ca" 'org-agenda)
    (define-key org-agenda-mode-map "j" 'org-agenda-next-item)
    (define-key org-agenda-mode-map "k" 'org-agenda-previous-item)

    (setq org-agenda-use-time-grid nil)
    (setq org-src-fontify-natively t
          org-src-tab-acts-natively t)
  #+END_SRC
  
** Org Bullets

   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package org-bullets
       :config
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
   #+END_SRC
  
* Packages
** Sublime Themes
   Use my theme in GUI but fall back when in terminal.

   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package sublime-themes
       :config
       (load-theme 'spolsky t))
     ;; Terminal theme
     (when (not (display-graphic-p))
       (load-theme 'wombat t))
     (load-file "~/.emacs.d/lisp/init-powerline.el")
   #+END_SRC

** Nlinum
   Basic line numbers.
   
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package nlinum
       :config
       (add-hook 'prog-mode-hook 'nlinum-mode))
   #+END_SRC
   
** Better Defaults & Ido
   Better defaults comes with =ido= which we tweak further by
   adding a few quality of life additions to it.

   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package better-defaults
       :config
       (use-package ido-complete-space-or-hyphen)
       (use-package ido-vertical-mode
         :config
         (ido-vertical-mode 1)
         (setq ido-vertical-define-keys 'C-n-and-C-p-only)))
   #+END_SRC

** Smex
   Like =ido= but for =M-x=.

   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package smex
       :demand
       :bind ("M-x" . smex))
   #+END_SRC

** Which Key
   Popup hints when you hesitate mid key-chord.

   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package which-key
       :config
       (which-key-mode))
   #+END_SRC

** Magit
   Git porcelain inside emacs.
   
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package magit
       :config
       (global-set-key "\C-x\g" 'magit-status))
   #+END_SRC

** Web Mode
   Multi purpose mode for pretty much all the web technologies out there.
   
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package web-mode
       :config
       (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.js\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
       ;; Small JS tweak
       (setq web-mode-content-types-alist
             '(("jsx" . "\\.js[x]?\\'"))))
   #+END_SRC

** Flycheck
   Code linting framework.

   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package flycheck
       :config
       (with-eval-after-load 'flycheck
         (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)))
       (global-flycheck-mode))
   #+END_SRC

** Company
   Auto completion framework as well as some additional backends.
   
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package company
       :init
       (global-company-mode)
       :config
       (setq company-idle-delay 0) ; Delay to complete
       (setq company-minimum-prefix-length 1)
       (setq company-selection-wrap-around t) ; Loops around suggestions

       (if (display-graphic-p)
           (define-key company-active-map [tab] 'company-select-next)
         (define-key company-active-map (kbd "C-i") 'company-select-next))

       ;; C / C++
       (setq company-clang-insert-arguments nil)
       (add-hook 'c++-mode-hook 'irony-mode)
       (add-hook 'c-mode-hook 'irony-mode)

       (use-package company-irony
         :config
         (eval-after-load 'company
           '(add-to-list 'company-backends 'company-irony)))

       (use-package company-jedi
         :config
         (defun my/python-mode-hook ()
           (add-to-list 'company-backends 'company-jedi))

         (add-hook 'python-mode-hook 'my/python-mode-hook))

       (require 'color)

       (let ((bg (face-attribute 'default :background)))
         (custom-set-faces
          `(company-tooltip ((t (:inherit default :background ,(color-lighten-name bg 2)))))
          `(company-scrollbar-bg ((t (:background ,(color-lighten-name bg 10)))))
          `(company-scrollbar-fg ((t (:background ,(color-lighten-name bg 5)))))
          `(company-tooltip-selection ((t (:inherit font-lock-function-name-face))))
          `(company-tooltip-common ((t (:inherit font-lock-constant-face)))))))
   #+END_SRC
   
* Backups
  
  #+BEGIN_SRC emacs-lisp :tangle yes
    (setq backup-by-copying t) ; Stop shinanigans with links
    (setq backup-directory-alist '((".*" . "~/.bak.emacs/backup/")))
    ;; Creates directory if it doesn't already exist
    (if (eq nil (file-exists-p "~/.bak.emacs/"))
        (make-directory "~/.bak.emacs/"))
    ;; Creates auto directory if it doesn't already exist
    (if (eq nil (file-exists-p "~/.bak.emacs/auto"))
        (make-directory "~/.bak.emacs/auto"))
    ;; backup in one place. flat, no tree structure
    (setq auto-save-file-name-transforms '((".*" "~/.bak.emacs/auto/" t)))
  #+END_SRC
